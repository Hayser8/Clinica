---
// src/layouts/Layout.astro (DeltaScan)
import "../styles/global.css";
import CookiePopup from "../components/common/CookiePopup.astro";

const {
  // SEO básicos (sobre-escribibles por la página)
  title = "DeltaScan – Clínica de Ultrasonido en Guatemala",
  description = "Ultrasonidos diagnósticos con radiólogos especialistas. Resultados el mismo día. Abdominal, mamario, tiroideo, pélvico, obstétrico, prostático y Doppler.",
  url = "https://www.deltascan.gt/",   // canonical completo de la página
  image = "/og/deltascan-og.webp",
  logo = "/logoprueba.webp",
  type = "website",
  siteName = "DeltaScan",
  robots,
  noindex = false,
  dateModified,
  reviewer, // "dr" | "dra" | undefined

  // Migas
  crumbs = [],

  // Contacto (defaults)
  phone = "+502 2448-1110",
  whatsapp = "+502 4565-0865",
  address = {
    streetAddress: "10 Calle 2-30, Zona 14, Edificio Prospere 14, 4to Nivel, Oficina 405",
    addressLocality: "Ciudad de Guatemala",
    addressRegion: "Guatemala",
    postalCode: "01014",
    addressCountry: "GT",
  },
  socialLinks = { facebook: "", instagram: "" },

  // Catálogo general
  serviceCatalog = [
    { name: "Ultrasonido Abdominal", slug: "/abdominal" },
    { name: "Ultrasonido Mamario", slug: "/mamario" },
    { name: "Ultrasonido Tiroideo", slug: "/tiroideo" },
    { name: "Ultrasonido Pélvico (suprapúbico y endovaginal)", slug: "/pelvico" },
    { name: "Ultrasonido Obstétrico", slug: "/obstetrico" },
    { name: "Ultrasonido Prostático (suprapúbico y transrectal)", slug: "/prostatico" },
    { name: "Ultrasonido Musculoesquelético", slug: "/musculoesqueletico" },
    { name: "Doppler Vascular (arterial/venoso)", slug: "/doppler" },
    { name: "Biopsia de Mama guiada por Ultrasonido", slug: "/biopsia-mama" },
    { name: "Biopsia de Tiroides guiada por Ultrasonido", slug: "/biopsia-tiroides" },
    { name: "Ultrasonido de Cuello", slug: "/cuello" },
    { name: "Ultrasonido Testicular", slug: "/testicular" },
    { name: "Ultrasonido Renal", slug: "/renal" },
  ],

  // Médicos
  physicians = [
    {
      name: "Dra. Berta Coto",
      jobTitle: "Médico Radiólogo",
      description: "Maestro en ciencias médicas con especialidad en Radiología e Imágenes Diagnósticas.",
    },
    {
      name: "Dr. Estuardo Pérez Reyes",
      jobTitle: "Médico Radiólogo",
      description: "Maestro en ciencias médicas con especialidad en Radiología e Imágenes Diagnósticas.",
    },
  ],

  // Datos por página (opcionales)
  faqData = [],
  howToData = null,
  schemaExtra = [],
} = Astro.props;

const dateModifiedIso  = dateModified ? new Date(dateModified).toISOString() : undefined;
const robotsContent = robots ?? (noindex ? "noindex, follow" : "index, follow");

// --------- Helpers ----------
const siteOrigin = new URL(url).origin;
const siteHome = `${siteOrigin}/`;
const clinicId = `${siteHome}#clinic`;

// Normaliza pathname (quita barra final excepto en "/")
const rawPath = new URL(url).pathname;
const currentPath = rawPath !== "/" ? rawPath.replace(/\/$/, "") : "/";
const isHome = currentPath === "/";

const toAbs = (u) => !u ? undefined : (/^https?:\/\//i.test(u) ? u : `${siteOrigin}${u.startsWith("/") ? u : `/${u}`}`);
const imageAbs = toAbs(image);
const logoAbs = toAbs(logo);

// reviewer -> nombre + URL pública
const reviewerData =
  reviewer === "dr"
    ? { name: "Dr. Estuardo Pérez Reyes", url: `${siteHome}estuardoperez` }
    : reviewer === "dra"
    ? { name: "Dra. Berta Coto", url: `${siteHome}bertacoto` }
    : null;

// Mapa de URL pública por nombre (para Person)
const physicianUrlMap = {
  "Dra. Berta Coto": `${siteHome}bertacoto`,
  "Dr. Estuardo Pérez Reyes": `${siteHome}estuardoperez`,
};

// Detecta el servicio de esta página por slug
const currentService = serviceCatalog.find((s) => s.slug === currentPath);

// Migas
const breadcrumbList = [
  { "@type": "ListItem", position: 1, name: "Inicio", item: siteHome },
  ...crumbs.map((crumb, i) => ({
    "@type": "ListItem",
    position: i + 2,
    name: crumb.label,
    item: `${siteOrigin}${crumb.href}`,
  })),
];

// FAQ JSON-LD
const faqJsonLd = faqData?.length
  ? {
      "@context": "https://schema.org",
      "@type": "FAQPage",
      mainEntity: faqData.map((f) => ({
        "@type": "Question",
        name: f.question,
        acceptedAnswer: { "@type": "Answer", text: f.answer },
      })),
    }
  : null;

// HowTo JSON-LD (1 o varios)
function toHowToJsonLd(entry) {
  if (!entry) return null;
  const steps = (entry.steps || []).map((s, idx) => ({
    "@type": "HowToStep",
    position: idx + 1,
    name: s.name || undefined,
    text: s.text,
    url: s.url ? `${siteOrigin}${s.url}` : undefined,
    image: s.image || undefined,
  }));
  return {
    "@context": "https://schema.org",
    "@type": "HowTo",
    name: entry.name,
    description: entry.description || undefined,
    image: entry.image || undefined,
    totalTime: entry.totalTime || undefined,
    estimatedCost: entry.estimatedCost || undefined,
    step: steps,
    supply: entry.supplies || undefined,
    tool: entry.tools || undefined,
  };
}

const howToJson = Array.isArray(howToData)
  ? howToData.map(toHowToJsonLd).filter(Boolean)
  : howToData
  ? [toHowToJsonLd(howToData)].filter(Boolean)
  : [];

// --------- JSON-LD blocks ----------

// Construye sameAs solo si hay enlaces (evita array vacío)
const sameAsList = [socialLinks.facebook || undefined, socialLinks.instagram || undefined].filter(Boolean);

// MedicalClinic (siempre) — solo lista availableService en Home
const medicalClinicJson = {
  "@id": clinicId,
  "@context": "https://schema.org",
  "@type": "MedicalClinic",
  name: siteName,
  url: siteHome,
  image: imageAbs,
  logo: logoAbs,
  telephone: phone,
  medicalSpecialty: "Radiology",
  address: {
    "@type": "PostalAddress",
    streetAddress: address.streetAddress,
    addressLocality: address.addressLocality,
    addressRegion: address.addressRegion,
    postalCode: address.postalCode || undefined,
    addressCountry: address.addressCountry || "GT",
  },
  ...(sameAsList.length ? { sameAs: sameAsList } : {}),
  ...(isHome
    ? {
        availableService: serviceCatalog.map((s) => ({
          "@type": "MedicalProcedure",
          name: s.name,
          url: `${siteOrigin}${s.slug}`,
        })),
      }
    : {}),
};

// OfferCatalog (solo en Home)
const offerCatalogJson = isHome
  ? {
      "@context": "https://schema.org",
      "@type": "OfferCatalog",
      name: "Catálogo de servicios",
      url: `${siteHome}#catalogo`,
      itemListElement: serviceCatalog.map((s, i) => ({
        "@type": "Offer",
        position: i + 1,
        itemOffered: {
          "@type": "Service",
          name: s.name,
          url: `${siteOrigin}${s.slug}`,
          provider: { "@id": clinicId },
          areaServed: "Guatemala",
          availableChannel: {
            "@type": "ServiceChannel",
            serviceUrl: `${siteOrigin}${s.slug}`,
            availableLanguage: ["es"],
          },
        },
      })),
    }
  : null;

// Service de la página actual (solo en páginas internas que estén en el catálogo)
const serviceJson = !isHome && currentService
  ? {
      "@context": "https://schema.org",
      "@type": "Service",
      "@id": `${siteOrigin}${currentService.slug}#service`,
      name: currentService.name,
      serviceType: "Diagnóstico por imagen",
      url: `${siteOrigin}${currentService.slug}`,
      areaServed: "GT",
      availableChannel: {
        "@type": "ServiceChannel",
        serviceUrl: `${siteOrigin}${currentService.slug}`,
        availableLanguage: ["es"],
      },
      provider: { "@id": clinicId },
    }
  : null;

// Médicos como Person (con URL pública cuando aplique)
const physiciansJson = physicians.map((p) => ({
  "@context": "https://schema.org",
  "@type": "Person",
  name: p.name,
  url: physicianUrlMap[p.name] || undefined,
  jobTitle: p.jobTitle || "Médico Radiólogo",
  medicalSpecialty: "Radiology",
  worksFor: { "@id": clinicId },
  description: p.description || undefined,
}));

// WebSite con @id para enlazar desde WebPage (usa siempre siteHome para consistencia del slash)
const webSiteJson = {
  "@context": "https://schema.org",
  "@type": "WebSite",
  "@id": `${siteHome}#website`,
  url: siteHome,
  name: siteName,
  potentialAction: {
    "@type": "SearchAction",
    target: `${siteHome}?q={search_term_string}`,
    "query-input": "required name=search_term_string",
  },
};

// WebPage / MedicalWebPage de la página actual
const webPageJson = {
  "@context": "https://schema.org",
  "@type": ["WebPage", "MedicalWebPage"],
  "@id": `${siteOrigin}${currentPath}#webpage`,
  name: title,
  description,
  url, // canonical
  inLanguage: "es-GT",
  ...(dateModifiedIso ? { dateModified: dateModifiedIso, lastReviewed: dateModifiedIso } : {}),
  primaryImageOfPage: imageAbs ? { "@type": "ImageObject", url: imageAbs } : undefined,
  publisher: { "@id": clinicId },
  isPartOf: { "@id": `${siteHome}#website` },
  ...(serviceJson ? { about: { "@id": serviceJson["@id"] } } : {}),
  ...(reviewerData
    ? { reviewedBy: { "@type": "Person", name: reviewerData.name, url: reviewerData.url } }
    : {}),
};

// BreadcrumbList
const breadcrumbJson = {
  "@context": "https://schema.org",
  "@type": "BreadcrumbList",
  itemListElement: breadcrumbList,
};

// Extra schema enviados por la página
const extraBlocks = Array.isArray(schemaExtra) ? schemaExtra : schemaExtra ? [schemaExtra] : [];

// Ensamble final (sin duplicar Service; sin sameAs vacío)
const allJsonLdBlocks = [
  webPageJson,
  webSiteJson,
  breadcrumbJson,
  medicalClinicJson,
  ...(isHome && offerCatalogJson ? [offerCatalogJson] : []),
  ...(serviceJson ? [serviceJson] : []),
  ...physiciansJson,
  ...(faqJsonLd ? [faqJsonLd] : []),
  ...howToJson,
  ...extraBlocks,
];
---

<!doctype html>
<html lang="es-GT">
  <head>
    <!-- Básicos -->
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="robots" content={robotsContent} />
    <meta name="googlebot" content={robotsContent} />
    <meta name="bingbot" content={robotsContent} />
    <meta property="og:locale" content="es_GT" />

    <!-- Title & Description -->
    <title>{title}</title>
    <meta name="description" content={description} />
    <link rel="canonical" href={url} />

    <!-- Open Graph -->
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:type" content={type} />
    <meta property="og:url" content={url} />
    <meta property="og:site_name" content={siteName} />
    <meta property="og:image" content={imageAbs} />
    <meta property="og:image:alt" content={`${siteName} – Clínica de Ultrasonido`} />
    <meta property="og:image:width" content="1200" />
    <meta property="og:image:height" content="630" />
    {dateModifiedIso && <meta property="og:updated_time" content={dateModifiedIso} />}

    <!-- Twitter Cards -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={description} />
    <meta name="twitter:image" content={imageAbs} />

    <!-- Favicons -->
    <link rel="icon" type="image/webp" sizes="48x48" href="/favicon48x48.webp" />
    <link rel="icon" type="image/webp" sizes="32x32" href="/favicon32x32.webp" />
    <link rel="icon" type="image/webp" sizes="16x16" href="/favicon16x16.webp" />
    <link rel="apple-touch-icon" href="/apple-touch-icon.png" />
    <meta name="theme-color" content="#DB2777" />

    <!-- JSON-LD (múltiples bloques) -->
    {allJsonLdBlocks.map((node) => (
      <script type="application/ld+json" set:html={JSON.stringify(node)} />
    ))}
  </head>

  <body>
    <main id="main">
      <slot />
    </main>
    <CookiePopup />
  </body>
</html>
